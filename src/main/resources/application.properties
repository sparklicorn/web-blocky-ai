# Houses the env vars referenced below.
# Copy '.env.example -> '.env' and edit as needed. See docs/setup/MySQL.md for more info.
# Then create symbolic link to .properties, because spring boot complains about .env files.
# Open terminal in project root: `ln -s .env .env.properties`
spring.config.import=optional:file:./env.properties

server.port=${SPRING_PORT:8080}
logging.level.org.atmosphere = warn
spring.mustache.check-template-location = false

# Launch the default browser when starting the application in development mode
vaadin.launch-browser=true

# Workaround for https://github.com/vaadin/hilla/issues/842
spring.devtools.restart.additional-exclude=dev/hilla/openapi.json
# To improve the performance during development.
# For more information https://vaadin.com/docs/flow/spring/tutorial-spring-configuration.html#special-configuration-parameters
vaadin.whitelisted-packages = com.vaadin,org.vaadin,dev.hilla,com.example.application
spring.jpa.defer-datasource-initialization = true

####################
#     DATABASE     #
####################
# !NOTE: When using Docker Compose, these properties are not used. See docker-compose.yml.

# Source: https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#configurations-hbmddl
# On app startup, JPA/Hibernate can perform schema management actions.
# There’s a good breakdown of options in the Spring Guide. https://spring.io/guides/gs/accessing-data-mysql/
# Initially, use either ‘create’ or ‘update’ as there is no initial structure in the database.
# These will auto-create or auto-update the database schema according to Entities defined in your code.
# For MySQL, after the structure is in place to where you want it, change this to ‘none’.
spring.jpa.hibernate.ddl-auto=update

# Default MySQL server port is 3306
spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATABASE}
spring.datasource.username=${MYSQL_USER}
spring.datasource.password=${MYSQL_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Log SQL statements in server output?
# spring.jpa.show-sql: true
